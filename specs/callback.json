{
  "openapi": "3.1.0",
  "info": {
    "version": "3",
    "title": "External API"
  },
  "servers": [
    {
      "url": "https://liqpay.ua"
    }
  ],
  "paths": {
    "/api/request?path=callback": {
      "post": {
        "summary": "Callback",
        "operationId": "callback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "acq_id": {
                    "type": "number",
                    "description": "Acquirer ID"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "pay",
                      "hold",
                      "paysplit",
                      "subscribe",
                      "auth",
                      "regular"
                    ],
                    "description": "Transaction type. Possible values:\n* `pay` - payment\n* `hold` - amount of hold on sender's account\n* `paysplit` - splitting payments\n* `subscribe` - creation of a regular payment\n* `auth` - card preauth\n* `regular` - regular payment"
                  },
                  "agent_commission": {
                    "type": "number",
                    "description": "Agent comission in payment currency"
                  },
                  "amount": {
                    "type": "number",
                    "description": "Payment amount"
                  },
                  "amount_bonus": {
                    "type": "number",
                    "description": "Payer bonus amount in payment currency debit"
                  },
                  "amount_credit": {
                    "type": "number",
                    "description": "Payment amount for credit in currency of `currency_credit`"
                  },
                  "amount_debit": {
                    "type": "number",
                    "description": "Payment amount for debit in currency of `currency_debit`"
                  },
                  "authcode_credit": {
                    "type": "string",
                    "description": "Authorization code for transaction of credit"
                  },
                  "authcode_debit": {
                    "type": "string",
                    "description": "Authorization code for transaction of debit"
                  },
                  "card_token": {
                    "type": "string",
                    "description": "Sender's card token"
                  },
                  "commission_credit": {
                    "type": "number",
                    "description": "Commission from the receiver in `currency_credit`"
                  },
                  "commission_debit": {
                    "type": "number",
                    "description": "Commission from the sender in `currency_debit`"
                  },
                  "completion_date": {
                    "type": "integer",
                    "format": "timestamp-ms",
                    "description": "Charge date"
                  },
                  "create_date": {
                    "type": "integer",
                    "format": "timestamp-ms",
                    "description": "Date of payment creation"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Payment currency"
                  },
                  "currency_credit": {
                    "type": "string",
                    "description": "Transaction currency of credit"
                  },
                  "currency_debit": {
                    "type": "string",
                    "description": "Transaction currency of debit"
                  },
                  "customer": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Unique customer ID in your shop"
                  },
                  "description": {
                    "type": "string",
                    "description": "Payment description"
                  },
                  "end_date": {
                    "type": "integer",
                    "format": "timestamp-ms",
                    "description": "Date of payment edition/end"
                  },
                  "err_code": {
                    "type": "string",
                    "description": "Error code"
                  },
                  "err_description": {
                    "type": "string",
                    "description": "Error description"
                  },
                  "info": {
                    "type": "string",
                    "description": "Additional payment information"
                  },
                  "ip": {
                    "type": "string",
                    "description": "Sender's IP address"
                  },
                  "is_3ds": {
                    "type": "boolean",
                    "description": "Possible values:\n* `true` - transaction passed with 3DS\n* `false` - transaction passed without 3DS"
                  },
                  "liqpay_order_id": {
                    "type": "string",
                    "description": "Payment order_id in LiqPay system"
                  },
                  "mpi_eci": {
                    "type": "integer",
                    "enum": [
                      5,
                      6,
                      7
                    ],
                    "description": "Possible values:\n* `5` - the transaction passed with 3DS (issuer and acquirer support 3d Secure technology)\n* `6` - the issuer of the payer card does not support 3d Secure technology\n* `7` - the operation passed without 3d Secure"
                  },
                  "order_id": {
                    "type": "string",
                    "description": "Order_id payment"
                  },
                  "payment_id": {
                    "type": "number",
                    "description": "Payment id in LiqPay system"
                  },
                  "paytype": {
                    "type": "string",
                    "enum": [
                      "card",
                      "privat24",
                      "masterpass",
                      "moment_part",
                      "cash",
                      "invoice",
                      "qr"
                    ],
                    "description": "Methods of payment. Possible values:\n* `card` - card payment\n* `privat24` - with privat24 account\n* `masterpass` - with masterpass account\n* `moment_part` - installments\n* `cash` - cash\n* `invoice` - to email\n* `qr` - qr code scanning"
                  },
                  "public_key": {
                    "type": "string",
                    "description": "Shop public key"
                  },
                  "receiver_commission": {
                    "type": "number",
                    "description": "Receiver comission in payment currency"
                  },
                  "redirect_to": {
                    "type": "string",
                    "description": "The link to which a customer has to be redirected to confirm the payment with 3D-Secure"
                  },
                  "refund_date_last": {
                    "type": "integer",
                    "format": "timestamp-ms",
                    "description": "Last return date for payment"
                  },
                  "rrn_credit": {
                    "type": "string",
                    "description": "Unique transaction ID in authorization and settlement system of issuer bank `Retrieval Reference number`"
                  },
                  "rrn_debit": {
                    "type": "string",
                    "description": "Unique transaction ID in authorization and settlement system of issuer bank `Retrieval Reference number`"
                  },
                  "sender_bonus": {
                    "type": "number",
                    "description": "Sender's bonus in the payment currency"
                  },
                  "sender_card_bank": {
                    "type": "string",
                    "description": "Sender's card bank"
                  },
                  "sender_card_country": {
                    "type": "string",
                    "description": "Sender's card country. Digital [ISO 3166-1 code](https://en.wikipedia.org/wiki/ISO_3166-1)"
                  },
                  "sender_card_mask2": {
                    "type": "string",
                    "description": "Sender's card"
                  },
                  "sender_card_type": {
                    "type": "string",
                    "description": "Sender's card type MC/Visa"
                  },
                  "sender_commission": {
                    "type": "number",
                    "description": "Commission from the sender in the payment currency"
                  },
                  "sender_first_name": {
                    "type": "string",
                    "description": "The name of the sender"
                  },
                  "sender_last_name": {
                    "type": "string",
                    "description": "Sender's last name"
                  },
                  "sender_phone": {
                    "type": "string",
                    "description": "Sender's phone number"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "error",
                      "failure",
                      "reversed",
                      "subscribed",
                      "success",
                      "unsubscribed",
                      "3ds_verify",
                      "captcha_verify",
                      "cvv_verify",
                      "ivr_verify",
                      "password_verify",
                      "phone_verify",
                      "pin_verify",
                      "receiver_verify",
                      "sender_verify",
                      "senderapp_verify",
                      "wait_qr",
                      "wait_sender",
                      "cash_wait",
                      "hold_wait",
                      "invoice_wait",
                      "prepared",
                      "processing",
                      "wait_accept",
                      "wait_card",
                      "wait_compensation",
                      "wait_lc",
                      "wait_reserve",
                      "wait_secure"
                    ],
                    "description": "Payment status.\nAvailable values:\nFinal payment statuses\n* `error` - Failed payment. Data is incorrect\n* `failure` - Failed payment\n* `reversed` - Payment refunded\n* `subscribed` - Subscribed successfully framed\n* `success` - Successful payment\n* `unsubscribed` - Subscribed successfully deactivated\nStatuses that required payment confirmation\n* `3ds_verify` - 3DS verification is required. To finish the payment you will require a [3ds_verify](https://www.liqpay.ua/en/doc/api/confirmation/3ds)\n* `captcha_verify` - Waiting for customer to confirm with captcha\n* `cvv_verify` - Sender's card CVV is required. To finish the payment you will require a [cvv_verify](https://www.liqpay.ua/en/doc/api/confirmation/CVV)\n* `ivr_verify` - Waiting for customer to confirm with IVR\n`otp_verify` OTP confirmation is required. OTP is sent to a customer phone number. To finish the payment you will require a [otp_verify](https://www.liqpay.ua/en/doc/api/confirmation/OTP)\n* `password_verify` - Waiting for customer to confirm with [Privat24](http://privat24.ua/)\n* `phone_verify` - Waiting for customer to enter a phone number. To finish the payment you will require a `phone_verify`\n* `pin_verify` - Waiting for customer to confirm with PIN-code\n* `receiver_verify` - Receiver additional data is required. To finish the payment you will require a [receiver_verify](https://www.liqpay.ua/en/doc/api/confirmation/receiver_verify)\n* `sender_verify` - Sender's additional data is required. To finish the payment you will require a [sender_verify](https://www.liqpay.ua/en/doc/api/confirmation/sender_verify)\n* `senderapp_verify` - Waiting for customer to confirm with Privat24\n* `wait_qr` - Waiting for customer to scan QR-code\n* `wait_sender` - Waiting for customer to confirm in mob app [Privat24](http://privat24.ua/)/SENDER\nOther payment statuses\n* `cash_wait` - Waiting for payment in self-service terminal\n* `hold_wait` - Amount was successfully blocked on the sender's account\n* `invoice_wait` - Invoice is created successfully, waiting for a payment\n* `prepared` - Payment is created, waiting for customer to finish it\n* `processing` - Payment is processing\n* `wait_accept` - Money are withdrawn from client but the store is still not verified. If the store is not activated for 60 days, payment will be automatically cancelled\n* `wait_card` - Recipient didn't set the compensation method\n* `wait_compensation` - Payment is successful, it will be transferred in daily settlement\n* `wait_lc` - Protected payment. Charging is successful, waiting for receipt of goods confirmation\n* `wait_reserve` - Funds are reserved to make a refund according to a refund request\n* `wait_secure` - Payment is verified"
                  },
                  "wait_reserve_status": {
                    "type": "string",
                    "enum": [
                      "true"
                    ],
                    "default": "true",
                    "description": "An additional payment status that indicates that the current payment is reserved for processing a return at your store. Possible values:\n* `true` - the payment is reserved for refund"
                  },
                  "token": {
                    "type": "string",
                    "description": "Payment token"
                  },
                  "type": {
                    "type": "string",
                    "description": "Payment type"
                  },
                  "version": {
                    "type": "integer",
                    "enum": [
                      3
                    ],
                    "default": 3,
                    "description": "Version API"
                  },
                  "err_erc": {
                    "type": "string",
                    "description": "Error code"
                  },
                  "product_category": {
                    "type": "string",
                    "description": "Product category in your shop"
                  },
                  "product_description": {
                    "type": "string",
                    "description": "Product description"
                  },
                  "product_name": {
                    "type": "string",
                    "description": "Product name in your shop"
                  },
                  "product_url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Product page address"
                  },
                  "refund_amount": {
                    "type": "number",
                    "description": "Refund amount"
                  },
                  "verifycode": {
                    "type": "string",
                    "format": "boolean-yesno",
                    "enum": [
                      "Y"
                    ],
                    "default": "Y",
                    "description": "Verification code"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}